#+Title: Org file based emacs configuration
#+Author: John W. Arens
#+Date: 2022
This is my configuration for Emacs 26.3 that comes with Ubuntu 20.04.

* Settings independent of packages
#+BEGIN_SRC emacs-lisp
  
  ;; Don't use TABS for indentations.
  (setq-default indent-tabs-mode nil)

  (defun jwa/frame-title-format ()
    (concat "%b" " " "<%f> " "  theme:" (symbol-name (car custom-enabled-themes))))

  (use-package emacs
    :preface
    (defvar jwa/indent-width 4) ; change this value to your preferred width
    :config
    (setq frame-title-format (jwa/frame-title-format)
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    (tool-bar-mode -1)
    ;; (menu-bar-mode -1)
    (global-hl-line-mode 'toggle)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101 ; > 100
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil
                  tab-width jwa/indent-width)

    ;; Omit default startup screen
    (setq inhibit-startup-screen t))

  ;; The Emacs default split doesn't seem too intuitive for most users.
  (use-package emacs
    :ensure nil
    :preface
    (defun jwa/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun jwa/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'jwa/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'jwa/split-and-follow-vertically))

    (use-package emacs
    :bind (("<home>" . beginning-of-buffer)
           ("<end>" . end-of-buffer)
           ("<f12>"  . repeat-complex-command))
    )
#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we
might as well try to organize under the same syntax as much as
possible to keep the configuration consistent. The option
~use-package-always-ensure~ is turned on in ~init.el~, so we'll add
~:ensure nil~ when configuring the built-in packages.
** Modernize selection behavior
Replace the active region just by typing text, just like modern
editors.
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** Enable display time
#+BEGIN_SRC emacs-lisp
  (use-package time
    :ensure nil
    :config (display-time-mode +1))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files
scatter around.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version
control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Slightly shorten eldoc display delay.
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default)
to the more standard K&R. Here we also set the indentation width of C,
C++, Java, and Python to the preferred value defined in
~jwa/indent-width~ (all languages default to 4, except JavaScript,
which is 2, as controlled in ~web-mode~). Of course, you can change
the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset jwa/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  ;; Python (both v2 and v3)
  (use-package python
    :ensure nil
    :config (setq python-indent-offset jwa/indent-width))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful,
let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the
differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
    (setq ediff-window-setup-function #'ediff-setup-windows-plain)
    (setq ediff-split-window-function #'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs
versions. No longer need an extra package for this. It also takes care
of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  ;; (use-package whitespace
  ;;   :ensure nil
  ;;   :hook (before-save . whitespace-cleanup))
#+END_SRC


** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file (concat user-emacs-directory "to-be-dumped.el")))
#+END_SRC
* Third-party packages
Customize packages here.
Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Load custom theme
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
  ;; (load-theme 'wilmersdorf t) ; an orginal theme created by Ian.

  ;;(use-package zenburn-theme
  ;;   :init (load-theme (quote zenburn) t t))
  ;;
  ;;(use-package solarized-theme
  ;;   :init (load-theme (quote solarized-dark) t t))
  ;;
  
  ;; Missing dependency cycle-themes
  (require 'cl)
  ;;(use-package cycle-themes
  ;;  :ensure t
  ;;  :init (setq cycle-themes-theme-list
  ;;        '(zenburn solarized-dark))
  ;;  :config (cycle-themes-mode)
  ;;  :bind ("C-c C-t" . cycle-themes))

  (use-package leuven-theme
    :init (load-theme 'leuven-dark t))

  (use-package solarized-theme
    :init (load-theme 'solarized-dark t))

  ;; (use-package color-theme-sanityinc-tomorrow
  ;;  :init (load-theme 'color-theme-sanityinc-tomorrow-night t))

  (use-package monokai-alt-theme
    :init (load-theme 'monokai t))
  
  ;; (use-package color-theme-sanityinc-solarized
  ;;   :init (load-theme 'color-theme-sanityinc-solarized-dark t t))

  ;; (use-package gruvbox-theme
  ;;   :init (load-theme 'gruvbox-dark-medium t t))
  ;;   ;; :init (load-theme 'gruvbox-dark-soft t t))
  ;;   ;; :init (load-theme 'gruvbox-dark-hard t t))

  ;; (use-package material-theme
  ;;   :init (load-theme 'material-dark t t))
  ;;   ;; :init (load-theme 'material-light t t))
  
  (use-package dracula-theme
    :init (load-theme 'dracula t t))
  
  (use-package zenburn-theme
    :init (load-theme 'zenburn t t))
  
  (use-package cycle-themes
    :ensure t
    :init (setq cycle-themes-theme-list
          '(solarized-dark leuven-dark monokai material material-light dracula zenburn))
    :config
      (cycle-themes-mode)
      (setq frame-title-format (jwa/frame-title-format))
    ;; :hook (cycle-themes-after-cycle-hook . (lambda () (message "%s" (car custom-enabled-themes))))
    ;; :hook (cycle-themes-after-cycle-hook . (lambda () (message "XXX %s" (car custom-enabled-themes))))
    :bind ("<f6>" . cycle-themes))

  (add-hook 'cycle-themes-after-cycle-hook
  #'(lambda ()(setq frame-title-format (jwa/frame-title-format))))


#+END_SRC
*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Welcome!"
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers and escape
sequences (e.g. ~\n, \t~).
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  ;; (use-package magit
  ;;   :bind ("C-x g" . magit-status)
  ;;   :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
  (use-package magit
     :bind ("C-x g" . magit-s))
#+END_SRC
** Searching/sorting enhancements & project management
*** Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is
enough to replace Ivy/Counsel and Helm. We install ido-vertical to get
a better view of the available options (use ~C-n~, ~C-p~ or arrow keys
to navigate). Ido-ubiquitous (from the ~ido-completing-read+~ package)
provides us ido-like completions in describing functions and variables
etc. Fuzzy matching is a nice feature and we have flx-ido for that
purpose.
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (ido-mode +1)
    (setq ido-everywhere t
          ido-enable-flex-matching t))

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode +1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

  (use-package ido-completing-read+ :config (ido-ubiquitous-mode +1))

  (use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  ;; (use-package flycheck
  ;;   :config
  ;;   (setq flycheck-python-flake8-executable "flake8")
  ;;   (flycheck-select-checker 'python-flake8)
  ;;   (global-flycheck-mode +1))

  ;; (use-package flycheck
  ;; :config (setq flycheck-checker 'python-flake8))

(use-package flycheck
  :config
  (flycheck-add-mode 'python-flake8 'python-mode)
  :hook
  (python-mode . flycheck-mode)
  (verilog-mode . flycheck-mode))
  ;; :hook (flycheck-mode . python-mode))

;; (add-hook 'python-mode-hook 'flycheck-mode)

;; Automatically remove trailing whitespace when file is saved.
;; (add-hook 'python-mode-hook
;; (lambda () (add-to-list 'write-file-functions 'delete-trailing-whitespace)))

#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2,
h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode)))

  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+END_SRC
*** Useful major modes
Markdown mode and Web mode, the latter covers our usages of HTML/CSS/JS/JSX/TS/TSX/JSON.
#+BEGIN_SRC emacs-lisp
  ;; (use-package markdown-mode
  ;;  :hook (markdown-mode . visual-line-mode))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+END_SRC
*** Markdown Preview
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure nil
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

  ;; https://github.com/shime/emacs-livedown
  (use-package livedown
    :load-path "/home/jarens/.emacs.d/lisp"
    :bind ("C-M-m" . livedown-preview)
    :config
    (setq livedown-autostart nil)
    (setq livedown-browser nil)
    (setq livedown-open t)
    (setq livedown-port 1337)
    )
#+END_SRC

*** Language Server Protocol
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-mode
  ;;   :hook ((python-mode c++-mode c-mode) . lsp-deferred)
  ;;   ;; :hook ((c++-mode c-mode) . lsp-deferred)
  ;;   :commands lsp)

  (use-package lsp-mode
    :hook ((c-mode          ; clangd
            c++-mode        ; clangd
            c-or-c++-mode   ; clangd
            ;; python-mode     ; pyright
            python-mode     ; jedi
            ;; verilog-mode
            web-mode        ; ts-ls/HTML/CSS
            ) . lsp-deferred)
    :commands lsp
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-log-io nil)
    (setq lsp-restart 'auto-restart)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-eldoc-hook nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-semantic-tokens-enable nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-enable-snippet nil)
    ;; (setq lsp-diagnostics-provider :flycheck)
    (setq lsp-diagnostics-provider :none)
    (setq read-process-output-max (* 1024 1024)) ;; 1MB
    (setq lsp-idle-delay 0.5))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-header t)
    (setq lsp-ui-doc-include-signature t)
    (setq lsp-ui-doc-border (face-foreground 'default))
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-delay 0.05))

  ;; (use-package lsp-pyright
  ;;   :hook (python-mode . (lambda () (require 'lsp-pyright)))
  ;;   :init (when (executable-find "python3")
  ;;         (setq lsp-pyright-python-executable-cmd "python3")))

(use-package lsp-jedi
  :ensure t
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))


#+END_SRC
*** python-mode
#+BEGIN_SRC emacs-lisp
;;   (use-package python-mode
;;     :hook (setq flycheck-enabled-checkers '(python-flake8 python-mypy))
;;           (setq flycheck-disabled-checkers '(python-pylint))
;;           (flycheck-select-checker 'python-flake8))

;; Need to do:
;; pip3 install -U jedi-language-server
;; pip3 install -U pyflakes
;; pip3 install -U flake8
;; (add-hook 'python-mode-hook 'flycheck-mode) 
;; (add-hook 'after-init-hook #'global-flycheck-mode)

;; (use-package flychecker
;;   :hook (setq flycheck-checker 'python-flake8))

(defun my-checker ()
  (interactive)
  (message "Ran my-checker")
  (flycheck-select-checker 'python-flake8))

;; (with-eval-after-load "jedi" (my-checker))

;; This might still be needed
;; (add-hook 'flycheck-mode-hook #'my-checker)


;; (add-hook 'python-mode #'(lambda () (flycheck-select-checker 'python-flake8)))

(defun jwa/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

;; (add-hook 'python-mode-hook 'jwa/python-mode-hook)

#+END_SRC
*** verilog-mode
#+BEGIN_SRC emacs-lisp
(setq verilog-indent-begin-after-if nil)

#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the
modeline. It provides the ~:diminish~ keyword we've been using in
other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
*** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
*** NeoTree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :bind ("<f8>" . neotree-toggle))
#+END_SRC

